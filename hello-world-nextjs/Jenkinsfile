pipeline {
    agent none  // No default agent, we will specify Kubernetes agent below

    environment {
        GKE_CLUSTER_NAME = 'lloyds-cluster-clone-1-clone-1'  // Replace with your GKE cluster name
        GKE_PROJECT = 'burner-ganprasa2'  // Replace with your GKE project ID
        GKE_ZONE = 'us-central1-a'  // Replace with your GKE cluster zone
        DOCKER_REGISTRY = 'us-central1-docker.pkg.dev/burner-ganprasa2/lloyds-repo'  // Replace with your Artifact Registry URL
        DOCKER_IMAGE_NAME = 'first-image'  // Replace with your Docker image name
    }

    stages {
        stage('Clone Repository') {
            agent {
                kubernetes {
                    label 'default'  // Use the default Kubernetes pod template defined in your cloud setup
                    defaultContainer 'node'
                }
            }
            steps {
                checkout scm  // Checkout the repository to Jenkins workspace
            }
        }

        stage('Install Dependencies') {
            agent {
                kubernetes {
                    label 'default'  // Use the default Kubernetes pod template defined in your cloud setup
                    defaultContainer 'node'
                }
            }
            steps {
                container('node') {
                    script {
                        dir('hello-world-nextjs') {
                            sh 'npm install'  // Install dependencies using npm
                        }
                    }
                }
            }
        }

        stage('Authenticate with Artifact Registry') {
            agent {
                kubernetes {
                    label 'default'  // Use the default Kubernetes pod template defined in your cloud setup
                    defaultContainer 'gcloud-sdk'
                }
            }
            steps {
                // Bind the credentials for the Artifact Registry service account key
                withCredentials([file(credentialsId: 'gcp-artifact-registry-key', variable: 'GCLOUD_SERVICE_KEY')]) {
                    script {
                        // Authenticate with Google Cloud using the service account key
                        sh 'gcloud auth activate-service-account --key-file=$GCLOUD_SERVICE_KEY'
                        sh 'gcloud auth configure-docker us-central1-docker.pkg.dev'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            agent {
                kubernetes {
                    label 'default'  // Use the default Kubernetes pod template defined in your cloud setup
                    defaultContainer 'docker'
                }
            }
            steps {
                container('docker') {
                    script {
                        // Build the Docker image using the mounted Docker socket
                        sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1 ./hello-world-nextjs"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            agent {
                kubernetes {
                    label 'default'  // Use the default Kubernetes pod template defined in your cloud setup
                    defaultContainer 'docker'
                }
            }
            steps {
                container('docker') {
                    script {
                        // Push Docker image to Artifact Registry
                        sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1"
                    }
                }
            }
        }

        stage('Deploy to GKE') {
            agent {
                kubernetes {
                    label 'default'  // Use the default Kubernetes pod template defined in your cloud setup
                    defaultContainer 'docker'
                }
            }
            steps {
                container('docker') {
                    script {
                        // Deploy to Google Kubernetes Engine (GKE)
                        sh "gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_ZONE} --project ${GKE_PROJECT}"
                        sh 'kubectl apply -f kubernetes/deployment.yaml'
                        sh 'kubectl apply -f kubernetes/service.yaml'
                    }
                }
            }
        }
    }
}
